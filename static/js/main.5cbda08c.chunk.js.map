{"version":3,"sources":["App.tsx","components/HomePage.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink.tsx","components/PeoplePage.tsx","components/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","App","className","role","to","HomePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","renderPersonName","person","name","slug","sex","PersonLink","peopleFromServer","useParams","selectedPerson","find","p","personMother","mother","motherName","personFather","father","fatherName","born","died","PeoplePage","useState","setPeopleFromServer","isLoading","setIsLoading","isError","setIsError","useEffect","data","catch","error","console","finally","length","map","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5cbda08c.chunk.js","sourcesContent":["import classNames from 'classnames';\n\nimport './App.scss';\nimport { NavLink, Outlet } from 'react-router-dom';\n\nconst getLinkClass = (\n  { isActive }: { isActive: boolean },\n) => classNames('navbar-item',\n  { 'has-background-grey-lighter': isActive });\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import classNames from 'classnames';\n\nimport { Link, useParams } from 'react-router-dom';\nimport React from 'react';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  peopleFromServer: Person[] | []\n};\n\nconst renderPersonName = (person: Person | undefined, name?: string | null) => {\n  let context;\n\n  if (person) {\n    context = (\n      <Link\n        to={`/people/${person.slug}`}\n        className={classNames({ 'has-text-danger': person.sex === 'f' })}\n      >\n        {person.name}\n      </Link>\n    );\n  } else if (!person && name) {\n    context = name;\n  } else {\n    context = '-';\n  }\n\n  return context;\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  person,\n  peopleFromServer,\n}) => {\n  const { slug } = useParams();\n  const selectedPerson = peopleFromServer.find(p => p.slug === slug);\n\n  const personMother = peopleFromServer.find(\n    mother => mother.name === person.motherName,\n  );\n\n  const personFather = peopleFromServer.find(\n    father => father.name === person.fatherName,\n  );\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames(\n        { 'has-background-warning': selectedPerson?.slug === person.slug },\n      )}\n    >\n      <td>{renderPersonName(person)}</td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>{renderPersonName(personMother, person.motherName)}</td>\n      <td>{renderPersonName(personFather, person.fatherName)}</td>\n    </tr>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { PersonLink } from './PersonLink';\n\nexport const PeoplePage = () => {\n  const [peopleFromServer, setPeopleFromServer] = useState<Person[] | []>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople().then((data) => {\n      setPeopleFromServer(data);\n    }).catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('Something went wrong', error);\n      setIsError(true);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  }, []);\n\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <Loader />\n      );\n    }\n\n    if (isError) {\n      return (\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          Something went wrong\n        </p>\n      );\n    }\n\n    if (peopleFromServer.length === 0) {\n      return (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      );\n    }\n\n    return (\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Sex</th>\n            <th>Born</th>\n            <th>Died</th>\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {peopleFromServer.map(person => {\n            return (\n              <PersonLink\n                key={person.name}\n                person={person}\n                peopleFromServer={peopleFromServer}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {renderContent()}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route\n            path=\"home\"\n            element={<Navigate to=\"/\" replace />}\n          />\n          <Route\n            path=\"*\"\n            element={<NotFoundPage />}\n          />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}